环境配置：

python == 3.8
keras == 2.4.3
tensorflow == 2.4.1
opencv-python == 4.5.3.56


文件介绍： 

main.py、yolo_predict.py两个文件可单独运行。main.py调用其他函数文件用于训练，yolo_predict.py调用训练权重进行检测。

1、crop_ccpd文件夹：存储车牌号3316张，目标检测数据集。

2、demo文件夹：该模型对测试集的目标检测结果，效果大体使人满意，但目标定位的精确度不是十分的高。

3、Logs文件夹：存储训练过程中的权重文件。

4、raw_weights.hdf5：模型初始训练时加载进的权重文件，成功加载后，将网络的特征提取部分冰冻起来，此部分不再训练。

5、tiny_yolov1_model.py：tiny_yolov1模型，其特征提取backbone比yolov1简单很多，但在VOC2007数据集下仍有一定效果。

6、yolo_loss.py：yolov1损失函数，对无目标物体置信度加权系数0.5，有目标物体置信度加权系数1，类别加权系数1，物体x、y、w、h坐标位置加权系数5。

7、train.py文件：导入初始权重raw_weights.hdf5，冰冻特征提取部分前31层，优化器adam = Adam(lr=1e-4, amsgrad=True)效果最佳。

8、yolo_predict.py：检测测试集的目标检测效果。

先借助矩阵广播机制，将yolov1输出结果转化为真实bounding box像素坐标。利用三次mask筛选保留候选区域。
第1次mask：筛选扔掉置信度不够的边框位置。
第2次mask：yolov1每个grid中有两个预测器，从两两中选择更好的那个。
第3次mask：利用非极大抑制，筛选掉重叠区域过高的边框位置。



实验过程记录：

1、yolov1输出单个类别的可信度、类别预测、边框坐标。

优化器：adam = Adam(lr=1e-4, amsgrad=True)，训练150个epoch，最佳val loss在16.25，后续达到瓶颈无法降低。


2、最开始算法效果不佳，原因是我们取ccpd数据集前3000张训练，后116张测试，但后面测试集图片和前面图片样式不太一样。
因为拿来训练的，和用来测试集的数据集不太一样，造成所有的bounding box预测都偏大。

于是在分配数据集时候选择shuffle打乱，这时训练val loss能降至更低，检测效果好了不少。
